stages:
  - build
  - deploy

build:
  image: docker:19
  services:
    - docker:stable-dind
  stage: build
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      variables:
        ENV: 'local'
    - if: $CI_COMMIT_BRANCH == "master"
      variables:
        ENV: 'production'
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - apk --update add nodejs npm
  script:
    # Install app
    - npm install

    # Testing
    - npm run test:coverage

    # Building
    - npm run build:$ENV
    - docker pull $CI_REGISTRY_IMAGE:latest
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest

deploy:
  image: alpine:latest
  stage: deploy
  # tags:
  #   - deployment
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client docker
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f my-app || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p 8080:8080 --name my-app $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
  # environment:
  #   name: production
  #   url: http://35.239.123.116
